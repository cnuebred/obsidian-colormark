/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ColorMark
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/extension/mark.ts
var import_view = require("@codemirror/view");
var color_syntax_query_regex = () => new RegExp(/(\{(\#(.*?))?(\$(.*?))?\|)([\s\S]+?)(\})/g);
var font_color_mark__basic = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = this.createDecorationSet(view);
  }
  update(update) {
    var _a, _b;
    if (update.docChanged || update.viewportChanged || update.selectionSet && ((_a = update.startState.selection) == null ? void 0 : _a.main.from) == ((_b = update.startState.selection) == null ? void 0 : _b.main.to))
      this.decorations = this.createDecorationSet(update.view);
  }
  createDecorationSet(view) {
    let decorations = [];
    for (let { from, to } of view.visibleRanges) {
      const text = view.state.doc.sliceString(from, to);
      const re = color_syntax_query_regex();
      let match;
      while ((match = re.exec(text)) !== null) {
        const start = from + match.index;
        const matchStart = start + match[1].length;
        const matchEnd = matchStart + match[6].length;
        this.isEditingInsideMarkers(decorations, view);
        if (match[2])
          decorations.push(
            import_view.Decoration.mark(
              { attributes: { style: `color:#${match[3]}` } }
            ).range(matchStart, matchEnd)
          );
        if (match[4])
          decorations.push(
            import_view.Decoration.mark(
              { attributes: { style: `background-color:#${match[5]};padding:1px;border-radius:3px` } }
            ).range(matchStart, matchEnd)
          );
      }
    }
    return import_view.Decoration.set(decorations, true);
  }
  isEditingInsideMarkers(decorations, view) {
    const { from, to } = view.state.selection.main;
    const doc = view.state.doc.toString();
    const re = color_syntax_query_regex();
    let match;
    while ((match = re.exec(doc)) !== null) {
      const start = match.index;
      const matchStart = start + match[1].length;
      const matchEnd = matchStart + match[6].length;
      const end = start + match[0].length;
      if (!(from >= start && to <= end)) {
        decorations.push(import_view.Decoration.replace({}).range(start, matchStart));
        decorations.push(import_view.Decoration.replace({}).range(matchEnd, end));
      }
    }
  }
}, {
  decorations: (v) => v.decorations
});
function font_color_mark__basic_extension() {
  return font_color_mark__basic;
}

// src/static.ts
var DEFAULT_SETTINGS = {};

// main.ts
var ColorMark = class extends import_obsidian.Plugin {
  // TODO
  async onload() {
    this.registerEditorExtension(font_color_mark__basic_extension());
    this.registerMarkdownPostProcessor((element, context) => {
      var _a;
      const COLOR_SYNTAX_QUERY_REGEX = /(?<!\=\")(\{(\#(.*?))?(\$(.*?))?\|)([\s\S]+?)(\})/g;
      let match;
      const replace_key = (...match2) => {
        return `<span style="color:#${match2[3]};background-color:#${match2[5]};padding:1px;border-radius:3px">${match2[6]}</span>`;
      };
      while ((match = COLOR_SYNTAX_QUERY_REGEX.exec(element.innerHTML || "")) !== null) {
        element.innerHTML = (_a = element.innerHTML) == null ? void 0 : _a.replace(
          COLOR_SYNTAX_QUERY_REGEX,
          replace_key
        );
      }
    });
    await this.loadSettings();
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        menu.addSeparator();
        menu.addItem((item) => {
          item.setTitle("\u{1F3A8} font color");
          item.onClick((evt) => {
            showColorSubMenu(editor, "font").showAtMouseEvent(evt);
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u{1F58C}\uFE0F background color");
          item.onClick((evt) => {
            showColorSubMenu(editor, "background").showAtMouseEvent(evt);
          });
        });
      })
    );
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var showColorSubMenu = (editor, type) => {
  const colors = {
    "Red \u{1F7E5}": "ff0000",
    "Green \u{1F7E9}": "00ff00",
    "Blue \u{1F7E6}": "0000ff",
    "Yellow \u{1F7E8}": "ffff00",
    "Purple \u{1F7EA}": "800080",
    "Orange \u{1F7E7}": "ffa500",
    "Black \u2B1B": "000000",
    "White \u2B1C": "ffffff",
    "Pink \u{1F338}": "ffc0cb",
    "Cyan \u{1F537}": "00ffff",
    "Magenta \u{1F7E3}": "ff00ff",
    "Lime \u{1F49A}": "00ff00",
    "Teal \u{1F7E9}": "008080",
    "Indigo \u{1F499}": "4b0082",
    "Maroon \u{1F7E4}": "800000",
    "Navy \u{1F535}": "000080",
    "Olive \u{1F7E2}": "808000",
    "Silver \u26AA": "c0c0c0",
    "Gold \u{1F7E1}": "ffd700",
    "Turquoise \u{1F7E6}": "40e0d0",
    "Violet \u{1F7EA}": "ee82ee"
  };
  const prefix = type == "font" ? "#" : type == "background" ? "$" : "";
  const colorMenu = new import_obsidian.Menu();
  Object.entries(colors).forEach(([colorName, colorHex]) => {
    colorMenu.addItem(
      (item) => item.setTitle(colorName).onClick((evt) => applyColor(editor, prefix + colorHex))
    );
  });
  return colorMenu;
};
function applyColor(editor, colorHex) {
  const selectedText = editor.getSelection();
  if (!selectedText) {
    new import_obsidian.Notice("No text selected.");
    return;
  }
  const coloredText = `{${colorHex}|${selectedText}}`;
  editor.replaceSelection(coloredText);
}
//# sourceMappingURL=data:application/json;base64,
